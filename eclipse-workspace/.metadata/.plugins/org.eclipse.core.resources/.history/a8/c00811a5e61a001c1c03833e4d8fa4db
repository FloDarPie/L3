package communicationCrypte;

import java.util.Arrays;
import java.util.Random;

public class Des {
	
	private int taille_bloc = 64;
	private int sous_bloc = 32;
	
	private int nb_ronde = 1;
	
	private int[][] tabInit1 = {{58,50,42,34,26,18,10,2},
								{60,52,44,36,28,20,12,4},
								{62,54,46,38,30,22,14,6},
								{64,56,48,40,32,24,16,8}};
	private int[][] tabInit2 = {{57,49,41,33,25,17,9,1},
								{59,51,43,35,27,11,3},
								{61,53,45,37,29,21,13,5},
								{63,55,47,39,31,23,15,7}};
	
	
	private int[] tab_decalage = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};
	private int[] master_key = new int[this.taille_bloc];
	
	public Des() {
		Random r = new Random();
		for(int i =0;i<this.taille_bloc;i++) {
			this.master_key[i] = Random.nextInt(1);
		}
		
	}
	
	public static void main(String[] args) {
		Des d = new Des();
		byte[][] messCrypte = d.crypte("salut");
		System.out.println(messCrypte);
		
		String info = d.decrypte(messCrypte);
		System.out.println(info);
		
	}

	public byte[][] crypte(String mess) {
		byte[] bit = mess.getBytes();
		int n = 8;
		int taille = bit.length/n;		
		byte[][] blocs = new byte[taille][n];
		
		for(int j=0; j<taille;j++ ) {
			blocs[j] = Arrays.copyOfRange(bit, j*8,8+j*8);
		}
		//this.permutation(blocs);
		return blocs;
		
	}
	
	
	private void permutation(byte[][] blocs){
		
		for(int i=0; i < blocs.length;i++) {
			
		}
		
	}
	
	public String decrypte(byte[][] messCrypte) {
		String b = new String();

		return b;
		
		
	}
	

}
